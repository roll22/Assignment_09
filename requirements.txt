 Use object oriented programming from the start.
     Implement classes that represent the entities in
     the problem domain, as well as the application’s layers,
     including the user interface.

 The program must provide a console-based user interface based on a MENU system.
    Implementation details are up to you.


    ==============For week 8 (Iteration 1, 25% of grade)=====================
 Implement features 1 and 2.
 Have at least 10 items in your application at startup, generated procedurally.
 Provide specification and tests for all classes and methods involved in the first functionality.
 Implement and use your own exception classes.


===================For week 9 (Iteration 2, 25% of grade)=============================
 Implement features 3 and 4.
 Implement tests as PyUnit unit tests.
=====================For week 10 (All required features must be implemented, 50% of grade)================
 Implement the undo/redo feature 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Bonus possibility (0.1p, deadline week 10)
 Have 95% code coverage using PyUnit tests, for all modules except the UI. Install the coverage
module, examine and improve your test code coverage until you reach this threshold.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Bonus possibility (0.2p, deadline week 10)
 In addition to the required menu-based user interface, also implement a graphical user interface
(GUI) for the program.
 To receive the bonus, both user interfaces (menu-based and graphical) must use the same program
layers. You have to be able to start the application with either UI, without making changes to code.




A faculty stores information about:
 Student:      <studentID>,        <name>.
 Discipline:   <disciplineID>,     <name>.
 Grade:        <disciplineID>,     <studentID>,       <grade_value>.



Create an application which allows to:
1. Manage the list of students and available disciplines.
The application must allow the user to
add,        error if exists
remove,     error if not exists
update,     error if not exits
list
both STUDENTS and DISCIPLINES.


2. Grade students at a given discipline.
ask for discipline
    err if not found
ask for name
    err if not found
ask for grades
    err if not compliant

Any student may receive ONE OR SEVERAL grades at any of the disciplines.
DELETING a STUDENT also REMOVES their GRADES.
Deleting a discipline deletes ALL grades at that discipline for ALL STUDENTS.

3. Search for disciplines/students based on ID or name/title.
The search must work using  case-insensitive,
                            partial string matching,
                            and must return ALL matching disciplines/students.

4. Create statistics:
 All students failing at one or more disciplines (students having an average <5 for a discipline are
considered to be failing)
 Students with the best school situation, sorted in descending order of their aggregated average
(the average between their average grades per discipline) by general average.
 All disciplines at which there is at least one grade, sorted in descending order of the average
grade received by all students enrolled at that discipline.

5. Unlimited undo/redo functionality.
Each step will undo/redo the previous operation performed by the user.
Undo/redo operations must cascade and have a memory-efficient
implementation (no superfluous list copying).